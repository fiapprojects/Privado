
#include <SPI.h>
#include <WiFi.h>
#include <math.h>

struct AccessPoint { String ssid; float x, y; };
AccessPoint aps[] = { {".", 0, 0}, {"Brasileiro_2G", 10, 0}, {"TB", 5, 8.66} };
const int numAPs = sizeof(aps) / sizeof(aps[0]);

void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(100);
  Serial.println("Iniciando escaneamento WiFi...");
}

void loop() {
  int n = WiFi.scanNetworks();
  Serial.println("Escaneamento concluído.");
  float rssiValues[numAPs] = {0}; bool foundAPs[numAPs] = {false};
  
  for (int i = 0; i < n; ++i) {
    String ssid = WiFi.SSID(i); int32_t rssi = WiFi.RSSI(i);
    for (int j = 0; j < numAPs; ++j) {
      if (ssid == aps[j].ssid) { rssiValues[j] = rssi; foundAPs[j] = true; 
        Serial.print("SSID: "); Serial.print(ssid); 
        Serial.print(" RSSI: "); Serial.println(rssi); }
    }
  }

  bool allAPsFound = true;
  for (int i = 0; i < numAPs; ++i) if (!foundAPs[i]) {
    allAPsFound = false; Serial.print("AP não encontrado: "); 
    Serial.println(aps[i].ssid);
  }

  if (allAPsFound) {
    float distances[numAPs]; 
    for (int i = 0; i < numAPs; ++i) {
      distances[i] = rssiToDistance(rssiValues[i]);
      Serial.print("Distância para "); Serial.print(aps[i].ssid); 
      Serial.print(": "); Serial.print(distances[i]); Serial.println(" metros");
    }

    float x = 0, y = 0;
    if (calculatePosition(distances, x, y)) {
      Serial.print("Posição estimada: (");
      Serial.print(x); Serial.print(", "); Serial.println(y);
    } else Serial.println("Erro na trilateração. Posições não podem ser determinadas.");
  } else Serial.println("Não encontrou todos os APs necessários para triangulação.");

  delay(5000);
}

float rssiToDistance(int32_t rssi) {
  float A = -42, n = 2.48;
  return pow(10, (A - rssi) / (10 * n));
}

bool calculatePosition(float distances[], float &x, float &y) {
  float x1 = aps[0].x, y1 = aps[0].y, x2 = aps[1].x, y2 = aps[1].y;
  float x3 = aps[2].x, y3 = aps[2].y, r1 = distances[0], r2 = distances[1], r3 = distances[2];
  float A = 2*x2 - 2*x1, B = 2*y2 - 2*y1, C = r1*r1 - r2*r2 - x1*x1 - y1*y1 + x2*x2 + y2*y2;
  float D = 2*x3 - 2*x2, E = 2*y3 - 2*y2, F = r2*r2 - r3*r3 - x2*x2 - y2*y2 + x3*x3 + y3*y3;
  float denominator = (A*E - B*D);
  if (denominator == 0) return false;

  x = (C*E - F*B) / denominator; y = (A*F - C*D) / denominator;
  return !isnan(x) && !isnan(y);
}
